 Resources:
  VPC:
    Type: 'AWS::EC2::VPC'
    Properties:
      CidrBlock: '10.0.0.0/16'

  InternetGateway:
    Type: 'AWS::EC2::InternetGateway'

  VPCGatewayAttachment:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  PublicRouteTable:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPC

  PublicRoute:
    Type: 'AWS::EC2::Route'
    DependsOn: VPCGatewayAttachment
    Properties:
      DestinationCidrBlock: '0.0.0.0/0'
      GatewayId: !Ref InternetGateway
      RouteTableId: !Ref PublicRouteTable

  Subnet:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref VPC
      CidrBlock: '10.0.1.0/24'
      MapPublicIpOnLaunch: true

  SubnetRouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref Subnet
      RouteTableId: !Ref PublicRouteTable

#  LoadBalancer:
#    Type: 'AWS::ElasticLoadBalancingV2::LoadBalancer'
#    Properties:
#      Name: 'my-load-balancer'
#      Scheme: internet-facing
#      Type: application
#      IpAddressType: ipv4
#      SecurityGroups:
#        - !Ref LoadBalancerSecurityGroup
#      Subnets:
#        - !Ref Subnet

  LoadBalancerSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: 'Enable HTTP access'
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: '0.0.0.0/0'

#  AutoScalingGroup:
#    Type: 'AWS::AutoScaling::AutoScalingGroup'
#    Properties:
#      AutoScalingGroupName: 'my-auto-scaling-group'
#      VPCZoneIdentifier: !Ref Subnet
#      LaunchConfigurationName: !Ref AutoScalingLaunchConfiguration
#      MinSize: 1
#      MaxSize: 3
#      TargetGroupARNs:
#        - !Ref TargetGroup
#      HealthCheckGracePeriod: 300
#      Cooldown: 300
#      Tags:
#        - Key: Name
#          Value: 'my-auto-scaling-group'
#          PropagateAtLaunch: true
#      MetricsCollection:
#        - Granularity: '1Minute'
#          Metrics:
#            - GroupMinSize
#            - GroupMaxSize
#            - GroupDesiredCapacity
#            - GroupInServiceInstances
#            - GroupPendingInstances
#            - GroupStandbyInstances
#            - GroupTerminatingInstances
#            - GroupTotalInstances
#      NotificationConfigurations:
#        - TopicARN: !Ref SNSNotificationTopic
#          NotificationTypes:
#            - 'autoscaling:EC2_INSTANCE_LAUNCH'
#            - 'autoscaling:EC2_INSTANCE_TERMINATE'

#  AutoScalingLaunchConfiguration:
#    Type: 'AWS::AutoScaling::LaunchConfiguration'
#    Properties:
#      LaunchConfigurationName: 'my-launch-configuration'
#      ImageId: ami-0c94855ba95c71c99
#      KeyName: !Ref KeyPairName
#      UserData:
#        Fn::Base64: !Sub |
#          #!/bin/bash
#          echo '<?php phpinfo(); ?>' > /var/www/html/index.php
#      SecurityGroups:
#        - !Ref LaunchConfigurationSecurityGroup
#      InstanceType: t2.micro
#      IamInstanceProfile: !Ref InstanceProfile
#      BlockDeviceMappings:
#        - DeviceName: /dev/xvdf
#          Ebs:
#            VolumeSize: '10'
#            VolumeType: gp2
#      AssociatePublicIpAddress: true

  LaunchConfigurationSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: 'Enable HTTP and SSH access'
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: '0.0.0.0/0'
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: '0.0.0.0/0'

  TargetGroup:
    Type: 'AWS::ElasticLoadBalancingV2::TargetGroup'
    Properties:
      Name: 'my-target-group'
      Port: 80
      Protocol: HTTP
      TargetType: ip
      VpcId: !Ref VPC

  S3Role:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: 's3-full-access-role'
      AssumeRolePolicyDocument:
        Statement:
          - Action: 'sts:AssumeRole'
            Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
        Version: '2012-10-17'
      Policies:
        - PolicyName: 's3-full-access'
          PolicyDocument:
            Statement:
              - Action: 's3:*'
                Effect: Allow
                Resource: '*'

  SNSNotificationTopic:
    Type: 'AWS::SNS::Topic'
    Properties:
      DisplayName: 'Auto Scaling Events'
      TopicName: 'my-auto-scaling-events'

  InstanceProfile:
    Type: 'AWS::IAM::InstanceProfile'
    Properties:
      InstanceProfileName: 'my-instance-profile'
      Roles:
        - !Ref S3Role

  EfsFileSystem:
    Type: 'AWS::EFS::FileSystem'
    Properties:
      FileSystemTags:
        - Key: Name
          Value: 'my-efs'
      PerformanceMode: generalPurpose
      Encrypted: true

#  EfsMountTarget:
#    Type: 'AWS::EFS::MountTarget'
#    Properties:
#      FileSystemId: !Ref EfsFileSystem
#      SubnetId: !Ref Subnet
#      SecurityGroups:
#        - !Ref EfsMountTargetSecurityGroup

#  EfsMountTargetSecurityGroup:
#    Type: 'AWS::EC2::SecurityGroup'
#    Properties:
#      GroupDescription: 'Enable NFS access to EFS'
#      SecurityGroupIngress:
#        - IpProtocol: tcp
#          FromPort: 2049
#          ToPort: 2049
#          SourceSecurityGroupId: !Ref LaunchConfigurationSecurityGroup

#Outputs:
#  LoadBalancerDNSName:
#    Value: !GetAtt LoadBalancer.DNSName
#
#  AutoScalingGroupName:
#    Value: !Ref AutoScalingGroup
